/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public ArrayList<Interval> merge(ArrayList<Interval> intervals) {
        if(intervals.size()>1){
            intervals = sort(intervals);
            for(int i =0; i<intervals.size(); ++i){
                if(i+1<intervals.size()&&(intervals.get(i).end>=intervals.get(i+1).start)){
                    intervals.get(i).end = intervals.get(i).end<intervals.get(i+1).end? intervals.get(i+1).end:intervals.get(i).end;
                    intervals.remove(i+1);
                    i--;
                }
            }
        }
        return intervals;
    }
    
    public ArrayList<Interval> sort(ArrayList<Interval> intervals){
        if(intervals.size()<=1){
            return intervals;
        }else{
            Interval pivot = intervals.get(0);
            ArrayList<Interval> leftlist = new ArrayList<Interval>();
            ArrayList<Interval> rightlist = new ArrayList<Interval>();
            for(int i =1; i<intervals.size(); i++){
                if(intervals.get(i).start <= pivot.start){
                    leftlist.add(intervals.get(i));
                }else{
                    rightlist.add(intervals.get(i));
                }
            }
            return connect(sort(leftlist), pivot,sort(rightlist));
        }
        
    }
    
    public ArrayList<Interval> connect(ArrayList<Interval> left, Interval mid, ArrayList<Interval> right){
        left.add(mid);
        left.addAll(right);
        return left;
    }
}
