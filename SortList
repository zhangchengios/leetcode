/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
     public ListNode sortList(ListNode head) {
	        if(head==null||head.next==null) return head;
	        
	        ListNode slow = head;
	        ListNode fast = head.next;
	        while(fast!=null&&fast.next!=null){
	            slow = slow.next;
	            fast = fast.next.next;
	        }
	        
	        ListNode newhead = sortList(slow.next);
	        slow.next = null;
	        head = sortList(head);
	        return mergeLists(head,newhead);
	        
	    }
	    
	    public ListNode mergeLists(ListNode l1, ListNode l2){
	        if(l1==null) return l2;
	        if(l2==null) return l1;
	        ListNode cur1 = l1;
	        ListNode cur2 = l2;
	        ListNode nhead = new ListNode(-1);
	        nhead.next = null;
	        ListNode cur = nhead;
	        while(cur1!=null&&cur2!=null){
	            cur.next = cur1.val<=cur2.val? cur1:cur2;
	            if(cur.next ==cur1){
	                cur1 = cur1.next;
	            }else{
	                cur2= cur2.next;
	            }
	            cur = cur.next;
	            cur.next =null;
	        }
	        if(cur1!=null){
	            cur.next = cur1;// use p1 first
	        }else{
	            cur.next = cur2;
	        }
	        
	        return l1.val<=l2.val?l1:l2;
	    }
}
