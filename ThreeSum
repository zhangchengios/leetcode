
// Key track is to jump the same elements in each round and sort the array at first;
public class Solution {
    public ArrayList<ArrayList<Integer>> threeSum(int[] num) {
        // Note: The Solution object is instantiated only once and is reused by each test case.
        ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
        //forget to sort the array first
        Arrays.sort(num);
        
        if(num.length<3) return res;
        for(int i=0; i<num.length; ++i){
            int ind2=i+1;// first time use0, get repeated result
            int ind3=num.length-1;
            while(ind2<ind3){//forget to get rid of the repeated result in the later run
                int sum = num[i]+num[ind2]+num[ind3];
                if(sum==0){
                    ArrayList<Integer> arr = new ArrayList<Integer>();
                    arr.add(num[i]);
                    arr.add(num[ind2]);
                    arr.add(num[ind3]);
                    res.add(arr);
                    ind3--;
                    while(ind3>ind2&&num[ind3]==num[ind3+1]) ind3--;// use ind3-1 first time
                    ind2++;
                    while(ind2<ind3&&num[ind2]==num[ind2-1]) ind2++;

                }else{
                    if(sum>0){//if its the same number, then jump to the next different one
                        ind3--;
                        while(ind3>ind2&&num[ind3]==num[ind3+1]) ind3--;
                        
                    }else{
                        ind2++;
                        while(ind2<ind3&&num[ind2]==num[ind2-1]) ind2++;
                        
                    }
                }
            }
            while(i<num.length-1&&num[i]==num[i+1]) ++i;// forget to deal with the redunbale i
        }
        
        return res;
    }

}
