/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public ArrayList<Interval> insert(ArrayList<Interval> intervals, Interval newInterval) {
        ArrayList<Interval> res = new ArrayList<Interval>();
        if(intervals.size()==0){
            res.add(newInterval);
        }else{
            int curpos = 0;
            boolean added = false;
            for(;curpos<intervals.size();curpos++){
                Interval cur = intervals.get(curpos);
                if(cur.start>newInterval.end){
                    if(!added) res.add(newInterval);
                    res.add(cur);
                    added = true;
                }else if(cur.end<newInterval.start){
                    res.add(cur);
                }else{
                    if(cur.start<=newInterval.start) newInterval.start = cur.start;// bug here ,merge to newInterval and wait for merge
                    if(cur.end>=newInterval.end) newInterval.end = cur.end;
                }
            }
            if(!added) res.add(newInterval);
        }
        return res;
    }
}
