public class Solution {
    public ArrayList<ArrayList<Integer>> subsetsWithDup(int[] num) {
        ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
        if(num==null||num.length==0) return res;
        res.add(new ArrayList<Integer>());//must consider adding the blank array
        Arrays.sort(num);
        for(int i =1; i<=num.length;++i){
            res.addAll(genSubsets(num,0,num.length-1,i));
        }
        return res;
    }
    public ArrayList<ArrayList<Integer>> genSubsets(int[] S, int left, int right, int len){
        ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
        if(len==0) return res;
        if(right-left+1<len||left>right) return res;
        if(right-left+1==len){
            ArrayList<Integer> list = new ArrayList<Integer>();
            for(int i=left;i<=right;i++)
                list.add(S[i]);
            res.add(list);
        }else{
                int next = left+1;
                while(next<S.length&&S[left]==S[next]) next++;// jump out the same elements
                res.addAll(genSubsets(S,next,right,len));// if do not add this number, jump out all the same values, or else it will gen a same length array
                ArrayList<ArrayList<Integer>> tmp = genSubsets(S,left+1,right,len-1);// 
                
                if(tmp.size()==0){//failed to consider this condition
                    ArrayList<Integer> list = new ArrayList<Integer>();
                    list.add(S[left]);
                    tmp.add(list);
                }else{
                    for(int j=0; j<tmp.size();++j){
                        tmp.get(j).add(0,S[left]);
                    }
                }
                res.addAll(tmp);
            
        }
        return res;
    }
}
